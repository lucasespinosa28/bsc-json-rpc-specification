{
	"openrpc": "1.2.4",
	"info": {
		"title": "Binance Smart Chain JSON-RPC Specification",
		"description": "A specification of the standard interface for Binance Smart Chain clients.",
		"license": {
			"name": "CC0-1.0",
			"url": "https://creativecommons.org/publicdomain/zero/1.0/legalcode"
		},
		"version": "0.0.1"
	},
	"methods": [
    {
      "name": "web3_clientVersion",
      "description": "Returns the version of the current client",
      "summary": "current client version",
      "params": [],
      "result": {
        "name": "clientVersion",
        "description": "client version",
        "schema": {
          "title": "clientVersion",
          "type": "string"
        }
      },
      "examples": [
        {
        "name": "Current client",
        "params": [],
        "result": {
          "name": "node version",
          "value": "<node>/<version>"
        }
        }
      ]
    },
    {
      "name": "web3_sha3",
      "summary": "Hashes data",
      "description": "Hashes data using the Keccak-256 algorithm",
      "params": [
        {
          "name": "data",
          "description": "data to hash using the Keccak-256 algorithm",
          "summary": "data to hash",
          "schema": {
            "title": "data",
            "type": "string",
            "pattern": "^0x[a-fA-F\\d]+$"
          }
        }
      ],
      "result": {
        "name": "hashedData",
        "description": "Keccak-256 hash of the given data",
        "schema": {
          "$ref": "#/components/schemas/Keccak"
        }
      },
      "examples": [
        {
          "name": "sha3Example",
          "params": [
            {
              "name": "sha3ParamExample",
              "value": "0x68656c6c6f20776f726c64"
            }
          ],
          "result": {
            "name": "sha3ResultExample",
            "value": "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad"
          }
        }
      ]
    },
    {
      "name": "net_listening",
      "summary": "returns listening status",
      "description": "Determines if this client is listening for new network connections.",
      "params": [],
      "result": {
        "name": "netListeningResult",
        "description": "`true` if listening is active or `false` if listening is not active",
        "schema": {
          "title": "isNetListening",
          "type": "boolean"
        }
      },
      "examples": [
        {
          "name": "netListeningTrueExample",
          "description": "example of true result for net_listening",
          "params": [],
          "result": {
            "name": "netListeningExampleFalseResult",
            "value": true
          }
        }
      ]
    },
    {
      "name": "net_peerCount",
      "summary": "number of peers",
      "description": "Returns the number of peers currently connected to this client.",
      "params": [],
      "result": {
        "name": "quantity",
        "description": "number of connected peers.",
        "schema": {
          "title": "numConnectedPeers",
          "description": "Hex representation of number of connected peers",
          "type": "string"
        }
      },
      "examples": [
        {
          "name": "Peer",
          "description": "example network network with 1 peer in hex",
          "params": [],
          "result": {
            "name": "Peers",
            "value": "0x1"
          }
        }
      ]
    },
    {
      "name": "net_version",
      "summary": "Network identifier associated with network",
      "description": "Returns the network ID associated with the current network.",
      "params": [],
      "result": {
        "name": "networkId",
        "description": "Network ID associated with the current network",
        "schema": {
          "title": "networkId",
          "type": "string",
          "pattern": "^[\\d]+$"
        }
      },
      "examples": [
        {
          "name": "NetworkId",
          "description": "example network ID of ethereum mainnet",
          "params": [],
          "result": {
            "name": "Id",
            "value": "1"
          }
        }
      ]
    },
    {
      "name": "eth_chainId",
      "summary": "Returns the currently configured chain id",
      "description": "Returns the currently configured chain id, a value used in replay-protected transaction signing as introduced by [EIP-155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md).",
      "params": [],
      "result": {
        "name": "chainId",
        "description": "hex format integer of the current chain id. Defaults are ETC=61, ETH=1, Morden=62.",
        "schema": {
          "title": "chainId",
          "type": "string",
          "pattern": "^0x[a-fA-F\\d]+$"
        }
      }
    },
		{
			"name": "eth_syncing",
			"summary": "Returns an object with data about the sync status or false.",
			"params": [],
			"result": {
				"name": "Syncing status",
				"schema": {
					"$ref": "#/components/schemas/SyncingStatus"
				}
			}
		},
		{
			"name": "eth_coinbase",
			"summary": "Returns the client coinbase address.",
			"params": [],
			"result": {
				"name": "Coinbase address",
				"schema": {
					"$ref": "#/components/schemas/address"
				}
			}
		},
		{
			"name": "eth_mining",
			"summary": "Returns whether the client is actively mining new blocks.",
			"params": [],
			"result": {
				"name": "Mining status",
				"schema": {
					"title": "miningStatus",
					"type": "boolean"
				}
			}
		},
		{
			"name": "eth_hashrate",
			"summary": "Returns the number of hashes per second that the node is mining with.",
			"params": [],
			"result": {
				"name": "Mining status",
				"schema": {
					"title": "Hashrate",
					"$ref": "#/components/schemas/uint"
				}
			}
		},
		{
			"name": "eth_gasPrice",
			"summary": "Returns the current price per gas in wei.",
			"params": [],
			"result": {
				"name": "Gas price",
				"schema": {
					"title": "Gas price",
					"$ref": "#/components/schemas/uint"
				}
			}
		},
		{
			"name": "eth_accounts",
			"summary": "Returns a list of addresses owned by client.",
			"params": [],
			"result": {
				"name": "Accounts",
				"schema": {
					"title": "Accounts",
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/address"
					}
				}
			}
		},
		{
			"name": "eth_blockNumber",
			"summary": "Returns the number of most recent block.",
			"params": [],
			"result": {
				"name": "Block number",
				"schema": {
					"$ref": "#/components/schemas/uint"
				}
			}
		},
		{
			"name": "eth_getBalance",
			"summary": "Returns the balance of the account of given address.",
			"params": [
				{
					"name": "Address",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/address"
					}
				},
				{
					"name": "Block",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/BlockNumberOrTag"
					}
				}
			],
			"result": {
				"name": "Block number",
				"schema": {
					"$ref": "#/components/schemas/uint"
				}
			}
		},
		{
			"name": "eth_getStorageAt",
			"summary": "Returns the value from a storage position at a given address.",
			"params": [
				{
					"name": "Address",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/address"
					}
				},
				{
					"name": "Storage slot",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/uint256"
					}
				},
				{
					"name": "Block",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/BlockNumberOrTag"
					}
				}
			],
			"result": {
				"name": "Value",
				"schema": {
					"$ref": "#/components/schemas/bytes"
				}
			}
		},
		{
			"name": "eth_getTransactionCount",
			"summary": "Returns the number of transactions sent from an address.",
			"params": [
				{
					"name": "Address",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/address"
					}
				},
				{
					"name": "Block",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/BlockNumberOrTag"
					}
				}
			],
			"result": {
				"name": "Transaction count",
				"schema": {
					"title": "Transaction count",
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/uint"
					}
				}
			}
		},
		{
			"name": "eth_getBlockTransactionCountByHash",
			"summary": "Returns the number of transactions in a block from a block matching the given block hash.",
			"params": [
				{
					"name": "Block hash",
					"schema": {
						"$ref": "#/components/schemas/hash32"
					}
				}
			],
			"result": {
				"name": "Transaction count",
				"schema": {
					"title": "Transaction count",
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/uint"
					}
				}
			}
		},
		{
			"name": "eth_getBlockTransactionCountByNumber",
			"summary": "Returns the number of transactions in a block matching the given block number.",
			"params": [
				{
					"name": "Block number",
					"schema": {
						"$ref": "#/components/schemas/uint"
					}
				}
			],
			"result": {
				"name": "Transaction count",
				"schema": {
					"title": "Transaction count",
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/uint"
					}
				}
			}
		},
		{
			"name": "eth_getCode",
			"summary": "Returns code at a given address.",
			"params": [
				{
					"name": "Address",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/address"
					}
				},
				{
					"name": "Block",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/BlockNumberOrTag"
					}
				}
			],
			"result": {
				"name": "Bytecode",
				"schema": {
					"$ref": "#/components/schemas/bytes"
				}
			}
		},
		{
			"name": "eth_sign",
			"summary": "Returns an EIP-191 signature over the provided data.",
			"params": [
				{
					"name": "Address",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/address"
					}
				},
				{
					"name": "Message",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/bytes"
					}
				}
			],
			"result": {
				"name": "Signature",
				"schema": {
					"$ref": "#/components/schemas/bytes65"
				}
			}
		},
		{
			"name": "eth_signTransaction",
			"summary": "Returns an RLP encoded transaction signed by the specified account.",
			"params": [
				{
					"name": "Transaction",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/TransactionWithSender"
					}
				}
			],
			"result": {
				"name": "Encoded transaction",
				"schema": {
					"$ref": "#/components/schemas/bytes"
				}
			}
		},
		{
			"name": "eth_sendTransaction",
			"summary": "Signs and submits a transaction.",
			"params": [
				{
					"name": "Transaction",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/TransactionWithSender"
					}
				}
			],
			"result": {
				"name": "Transaction hash",
				"schema": {
					"$ref": "#/components/schemas/hash32"
				}
			}
		},
		{
			"name": "eth_sendRawTransaction",
			"summary": "Submits a raw transaction.",
			"params": [
				{
					"name": "Transaction",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/bytes"
					}
				}
			],
			"result": {
				"name": "Transaction hash",
				"schema": {
					"$ref": "#/components/schemas/hash32"
				}
			}
		},
		{
			"name": "eth_call",
			"summary": "Executes a new message call immediately without creating a transaction on the block chain.",
			"params": [
				{
					"name": "Transaction",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/TransactionWithSender"
					}
				}
			],
			"result": {
				"name": "Return data",
				"schema": {
					"$ref": "#/components/schemas/bytes"
				}
			}
		},
		{
			"name": "eth_estimateGas",
			"summary": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.",
			"params": [
				{
					"name": "Transaction",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/TransactionWithSender"
					}
				}
			],
			"result": {
				"name": "Gas used",
				"schema": {
					"$ref": "#/components/schemas/uint"
				}
			}
		},
		{
			"name": "eth_getBlockByHash",
			"summary": "Returns information about a block by hash.",
			"params": [
				{
					"name": "Block hash",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/hash32"
					}
				}
			],
			"result": {
				"name": "Block information",
				"schema": {
					"$ref": "#/components/schemas/Block"
				}
			}
		},
		{
			"name": "eth_getBlockByNumber",
			"summary": "Returns information about a block by number.",
			"params": [
				{
					"name": "Block number",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/uint"
					}
				}
			],
			"result": {
				"name": "Block information",
				"schema": {
					"$ref": "#/components/schemas/Block"
				}
			}
		},
		{
			"name": "eth_getTransactionByHash",
			"summary": "Returns the information about a transaction requested by transaction hash.",
			"params": [
				{
					"name": "Transaction hash",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/hash32"
					}
				}
			],
			"result": {
				"name": "Transaction information",
				"schema": {
					"$ref": "#/components/schemas/TransactionInfo"
				}
			}
		},
		{
			"name": "eth_getTransactionByBlockHashAndIndex",
			"summary": "Returns information about a transaction by block hash and transaction index position.",
			"params": [
				{
					"name": "Block hash",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/hash32"
					}
				},
				{
					"name": "Transaction index",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/uint"
					}
				}
			],
			"result": {
				"name": "Transaction information",
				"schema": {
					"$ref": "#/components/schemas/TransactionInfo"
				}
			}
		},
		{
			"name": "eth_getTransactionByBlockNumberAndIndex",
			"summary": "Returns information about a transaction by block number and transaction index position.",
			"params": [
				{
					"name": "Block number",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/uint"
					}
				},
				{
					"name": "Transaction index",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/uint"
					}
				}
			],
			"result": {
				"name": "Transaction information",
				"schema": {
					"$ref": "#/components/schemas/TransactionInfo"
				}
			}
		},
    {
      "name": "eth_getTransactionsByBlockNumber",
      "summary": "Returns the information about a transaction requested by the block number.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumber"
        },
        {
          "name": "index",
          "description": "The ordering in which a transaction is mined within its block.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Integer"
          }
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionResult"
      }
    },
    {
      "name": "eth_getTransactionReceiptsByBlockNumber",
       "summary": "Returns the receipt of a transaction by block number.",
        "params": [
          {
            "name": "Transaction hash",
            "schema": {
              "$ref": "#/components/schemas/hash32"
            }
          }
        ],
        "result": {
          "name": "Receipt Information",
          "schema": {
            "$ref": "#/components/schemas/ReceiptInfo"
          }
        }
      },
		{
			"name": "eth_getTransactionReceipt",
			"summary": "Returns the receipt of a transaction by transaction hash.",
			"params": [
				{
					"name": "Transaction hash",
					"schema": {
						"$ref": "#/components/schemas/hash32"
					}
				}
			],
			"result": {
				"name": "Receipt Information",
				"schema": {
					"$ref": "#/components/schemas/ReceiptInfo"
				}
			}
		},
    {
			"name": "eth_getTransactionDataAndReceipt",
			"summary": "Returns the receipt of a transaction by transaction hash.",
			"params": [
				{
					"name": "Transaction hash",
					"schema": {
						"$ref": "#/components/schemas/hash32"
					}
				}
			],
			"result": {
				"name": "Receipt Information",
				"schema": {
					"$ref": "#/components/schemas/ReceiptInfo"
				}
			}
		},
		{
			"name": "eth_newFilter",
			"summary": "Creates a filter object, based on filter options, to notify when the state changes (logs).",
			"params": [
				{
					"name": "Filter",
					"schema": {
						"$ref": "#/components/schemas/Filter"
					}
				}
			],
			"result": {
				"name": "Filter Identifier",
				"schema": {
					"$ref": "#/components/schemas/uint"
				}
			}
		},
		{
			"name": "eth_newBlockFilter",
			"summary": "Creates a filter in the node, to notify when a new block arrives.",
			"params": [],
			"result": {
				"name": "Filter Identifier",
				"schema": {
					"$ref": "#/components/schemas/uint"
				}
			}
		},
		{
			"name": "eth_newPendingTransactionFilter",
			"summary": "Creates a filter in the node, to notify when new pending transactions arrive.",
			"params": [],
			"result": {
				"name": "Filter Identifier",
				"schema": {
					"$ref": "#/components/schemas/uint"
				}
			}
		},
		{
			"name": "eth_uninstallFilter",
			"summary": "Uninstalls a filter with given id.",
			"params": [
				{
					"name": "Filter Identifier",
					"schema": {
						"$ref": "#/components/schemas/uint"
					}
				}
			],
			"result": {
				"name": "Success",
				"schema": {
					"type": "boolean"
				}
			}
		},
		{
			"name": "eth_getFilterChanges",
			"summary": "Polling method for a filter, which returns an array of logs which occurred since last poll.",
			"params": [
				{
					"name": "Filter Identifier",
					"schema": {
						"$ref": "#/components/schemas/uint"
					}
				}
			],
			"result": {
				"name": "Log objects",
				"schema": {
					"$ref": "#/components/schemas/FilterResults"
				}
			}
		},
		{
			"name": "eth_getFilterLogs",
			"summary": "Returns an array of all logs matching filter with given id.",
			"params": [
				{
					"name": "Filter Identifier",
					"schema": {
						"$ref": "#/components/schemas/uint"
					}
				}
			],
			"result": {
				"name": "Log objects",
				"schema": {
					"$ref": "#/components/schemas/FilterResults"
				}
			}
		},
		{
			"name": "eth_getLogs",
			"summary": "Returns an array of all logs matching filter with given id.",
			"params": [
				{
					"name": "Filter",
					"schema": {
						"$ref": "#/components/schemas/Filter"
					}
				}
			],
			"result": {
				"name": "Log objects",
				"schema": {
					"$ref": "#/components/schemas/FilterResults"
				}
			}
		}
	],
	"components": {
		"schemas": {
			"address": {
				"title": "hex encoded address",
				"type": "string",
				"pattern": "^0x[0-9a-f]{40}$"
			},
			"addresses": {
				"title": "hex encoded address",
				"type": "array",
				"items": { "$ref": "#/components/schemas/address" }
			},
			"byte": {
				"title": "hex encoded byte",
				"type": "string",
				"pattern": "^0x([a-fA-F0-9]?){1,2}$"
			},
			"bytes": {
				"title": "hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]+$"
			},
			"bytes32": {
				"title": "32 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{64}$"
			},
			"bytes256": {
				"title": "256 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{512}$"
			},
			"bytes65": {
				"title": "65 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{512}$"
			},
			"uint": {
				"title": "hex encoded unsigned integer",
				"type": "string",
				"pattern": "^0x[0-9a-f]+$"
			},
			"uint256": {
				"title": "hex encoded unsigned integer",
				"type": "string",
				"pattern": "^0x[0-9a-f]{64}$"
			},
			"hash32": {
				"title": "32 byte hex value",
				"type": "string",
				"pattern": "^0x[0-9a-f]{64}$"
			},
			"BlockTag": {
				"title": "Block tag",
				"type": "string",
				"enum": ["earliest", "latest", "pending"]
			},
			"BlockNumberOrTag": {
				"title": "Block number or tag",
				"oneOf": [
					{
						"title": "Block number",
						"$ref": "#/components/schemas/uint"
					},
					{
						"title": "Block tag",
						"$ref": "#/components/schemas/BlockTag"
					}
				]
			},
			"SyncingStatus": {
				"title": "Syncing status",
				"oneOf": [
					{
						"title": "Syncing progress",
						"type": "object",
						"properties": {
							"startingBlock": {
								"title": "Starting block",
								"$ref": "#/components/schemas/uint"
							},
							"currentBlock": {
								"title": "Current block",
								"$ref": "#/components/schemas/uint"
							},
							"highestBlock": {
								"title": "Highest block",
								"$ref": "#/components/schemas/uint"
							}
						}
					},
					{
						"title": "Not syncing",
						"description": "Should always return false if not syncing.",
						"type": "boolean"
					}
				]
			},
			"FilterResults": {
				"title": "Filter results",
				"oneOf": [
					{
						"title": "new block hashes",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/hash32"
						}
					},
					{
						"title": "new transaction hashes",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/hash32"
						}
					},
					{
						"title": "new logs",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Log"
						}
					}
				]
			},
			"Header": {
				"title": "Header object",
				"type": "object",
				"required": [
					"parentHash",
					"sha3Uncles",
					"miner",
					"stateRoot",
					"transactionsRoot",
					"receiptRoot",
					"bloom",
					"totalDifficulty",
					"number",
					"gasLimit",
					"gasUsed",
					"timestamp",
					"extraData",
					"mixHash",
					"nonce"
				],
				"properties": {
					"parentHash": {
						"title": "Parent block hash",
						"$ref": "#/components/schemas/hash32"
					},
					"sha3Uncles": {
						"title": "Ommers hash",
						"$ref": "#/components/schemas/hash32"
					},
					"miner": {
						"title": "Coinbase",
						"$ref": "#/components/schemas/address"
					},
					"stateRoot": {
						"title": "State root",
						"$ref": "#/components/schemas/hash32"
					},
					"transactionsRoot": {
						"title": "Transactions root",
						"$ref": "#/components/schemas/hash32"
					},
					"receiptRoot": {
						"title": "Receipts root",
						"$ref": "#/components/schemas/hash32"
					},
					"bloom": {
						"title": "Bloom filter",
						"$ref": "#/components/schemas/bytes256"
					},
					"totalDifficulty": {
						"title": "Difficulty",
						"$ref": "#/components/schemas/bytes"
					},
					"number": {
						"title": "Number",
						"$ref": "#/components/schemas/uint"
					},
					"gasLimit": {
						"title": "Gas limit",
						"$ref": "#/components/schemas/uint"
					},
					"gasUsed": {
						"title": "Gas used",
						"$ref": "#/components/schemas/uint"
					},
					"timestamp": {
						"title": "Timestamp",
						"$ref": "#/components/schemas/uint"
					},
					"extraData": {
						"title": "Extra data",
						"$ref": "#/components/schemas/bytes"
					},
					"mixHash": {
						"title": "Mix hash",
						"$ref": "#/components/schemas/hash32"
					},
					"nonce": {
						"title": "nonce",
						"$ref": "#/components/schemas/bytes"
					},
					"baseFeePerGas": {
						"title": "Base fee per gas",
						"$ref": "#/components/schemas/uint"
					}
				}
			},
			"Block": {
				"title": "Block object",
				"type": "object",
				"required": ["transactions", "uncles"],
				"allOf": [
					{ "$ref": "#/components/schemas/Header" },
					{ 
						"title": "transactions",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/hash32"
						}
					},
					{
						"title": "uncles",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/hash32"
						}
					}
				]
			},
			"AccessListEntry": {
				"title": "Access list entry",
				"type": "object",
				"properties": {
					"address": {
						"$ref": "#/components/schemas/address"
					},
					"storageKeys": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/hash32"
						}
					}
				}
			},
			"AccessList": {
				"title": "Access list",
				"type": "object",
				"items": {
					"$ref": "#/components/schemas/AccessListEntry"
				}
			},
			"SignedTransaction": {
				"title": "Signed transaction object",
				"type": "object",
				"allOf": [
					{ "$ref": "#/components/schemas/Transaction" },
					{
						"required": ["v", "r", "s"],
						"properties": {
							"v": {
								"title": "v",
								"$ref": "#/components/schemas/uint"
							},
							"r": {
								"title": "r",
								"$ref": "#/components/schemas/uint"
							},
							"s": {
								"title": "s",
								"$ref": "#/components/schemas/uint"
							}
						}
					}
				]
			},
			"TransactionWithSender": {
				"title": "Transaction object with sender",
				"type": "object",
				"allOf": [
					{
						"required": ["from"],
						"properties": {
							"from": {
								"title": "from",
								"$ref": "#/components/schemas/address"
							}
						}
					},
					{ "$ref": "#/components/schemas/Transaction" }	
				]
			},
			"Transaction": {
				"type": "object",
				"title": "Transaction object",
				"allOf": [
					{
						"required": ["nonce", "gas", "value", "input"],
						"properties": {
							"type": {
								"title": "type",
								"$ref": "#/components/schemas/byte"
							},
							"nonce": {
								"title": "nonce",
								"$ref": "#/components/schemas/uint"
							},
							"to": {
								"title": "to address",
								"$ref": "#/components/schemas/address"
							},
							"gas": {
								"title": "gas limit",
								"$ref": "#/components/schemas/uint"
							},
							"value": {
								"title": "value",
								"$ref": "#/components/schemas/uint"
							},
							"input": {
								"title": "input data",
								"$ref": "#/components/schemas/bytes"
							},
							"accessList": {
								"title": "accessList",
								"description": "EIP-2930 access list",
								"$ref": "#/components/schemas/AccessList"
							}
						}
					},
					{
						"oneOf": [
							{
								"title": "EIP-1559 fee market parameters",
								"type": "object",
								"description": "EIP-1559 dynamic fee transactions have two fee parameters.",
								"required": [
									"maxFeePerGas",
									"maxPriorityFeePerGas"
								],
								"properties": {
									"maxPriorityFeePerGas": {
										"title": "max priority fee per gas",
										"description": "Maximum fee per gas the sender is willing to pay to miners in wei",
										"$ref": "#/components/schemas/uint"
									},
									"maxFeePerGas": {
										"title": "max fee per gas",
										"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",
										"$ref": "#/components/schemas/uint"
									}
								}
							},
							{
								"title": "Legacy fee market parameters",
								"type": "object",
								"description": "Legacy transactions and EIP-2930 access list transaction include this parameter.",
								"required": ["gasPrice"],
								"properties": {
									"gasPrice": {
										"title": "gas price",
										"description": "The gas price willing to be paid by the sender in wei",
										"$ref": "#/components/schemas/uint"
									}
								}
							}
						]
					}
				]
			},
			"TransactionInfo": {
				"type": "object",
				"title": "Transaction information",
				"allOf": [
					{
						"title": "Contextual information",
						"required": ["blockHash", "blockNumber", "from", "hash", "transactionIndex"],
						"properties": {
							"blockHash": {
								"title": "block hash",
								"$ref": "#/components/schemas/hash32"
							},
							"blockNumber": {
								"title": "block number",
								"$ref": "#/components/schemas/uint"
							},
							"from": {
								"title": "from address",
								"$ref": "#/components/schemas/address"
							},
							"hash": {
								"title": "transaction hash",
								"$ref": "#/components/schemas/hash32"
							},
							"transactionIndex": {
								"title": "transaction index",
								"$ref": "#/components/schemas/uint"
							}
						}
					},
					{ "$ref": "#/components/schemas/SignedTransaction"}
				]
			},
			"Filter": {
				"title": "filter",
				"type": "object",
				"properties": {
					"fromBlock": {
						"title": "from block",
						"$ref": "#/components/schemas/uint"
					},
					"toBlock": {
						"title": "to block",
						"$ref": "#/components/schemas/uint"
					},
					"address": {
						"title": "Address(es)",
						"oneOf": [
							{
								"title": "Address",
								"$ref": "#/components/schemas/address"
							},
							{	
								"title": "Addresses",
								"$ref": "#/components/schemas/addresses"
							}
						]
					},
					"topics": {
						"title": "Topics",
						"$ref": "#/components/schemas/Topics"
					}
				}
			},
			"Topic": {
				"title": "Topic",
				"$ref": "#/components/schemas/uint256"
			},
			"Topics": {
				"title": "Topics",
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Topic"
				}
			},
			"Log": {
				"title": "log",
				"type": "object",
				"properties": {
					"removed": {
						"title": "removed",
						"type": "boolean"
					},
					"logIndex": {
						"title": "log index",
						"$ref": "#/components/schemas/uint"
					},
					"transactionIndex": {
						"title": "transaction index",
						"$ref": "#/components/schemas/uint"
					},
					"transactionHash": {
						"title": "transaction hash",
						"$ref": "#/components/schemas/hash32"
					},
					"blockHash": {
						"title": "block hash",
						"$ref": "#/components/schemas/hash32"
					},
					"blockNumber": {
						"title": "block number",
						"$ref": "#/components/schemas/uint"
					},
					"address": {
						"title": "address",
						"$ref": "#/components/schemas/address"
					},
					"data": {
						"title": "data",
						"$ref": "#/components/schemas/bytes"
					},
					"topics": {
						"title": "topics",
						"$ref": "#/components/schemas/Topics"
					}
				}
			},
			"ReceiptInfo": {
				"type": "object",
				"title": "Receipt info",
				"required": [
					"transactionHash", "transactionIndex", "value", "input"],
				"properties": {
					"transactionHash": {
						"title": "transaction hash",
						"$ref": "#/components/schemas/hash32"
					},
					"transactionIndex": {
						"title": "transaction index",
						"$ref": "#/components/schemas/uint"
					},
					"blockHash": {
						"title": "block hash",
						"$ref": "#/components/schemas/hash32"
					},
					"blockNumber": {
						"title": "block number",
						"$ref": "#/components/schemas/uint"
					},
					"from": {
						"title": "from",
						"$ref": "#/components/schemas/address"
					},
					"to": {
						"title": "to",
						"$ref": "#/components/schemas/address"
					},
					"cumulativeGasUsed": {
						"title": "accessList",
						"$ref": "#/components/schemas/uint"
					},
					"gasUsed": {
						"title": "gasUsed",
						"$ref": "#/components/schemas/uint"
					},
					"contractAddress": {
						"title": "contract address",
						"$ref": "#/components/schemas/address"
					},
					"logs": {
						"title": "logs",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Log"
						}
					},
					"logsBloom": {
						"title": "logs bloom",
						"$ref": "#/components/schemas/bytes256"
					}
				}
			}
		}
	}
}